COMPONENTS_PATH = $(HAL_PATH)/..
STACK_PATH = $(COMPONENTS_PATH)/..
STACK_LIB_PATH = $(STACK_PATH)/lib

include $(COMPONENTS_PATH)/HAL/Configuration

#-------------------------------------------------------------------------------
# Platform specific compiler flags definition and settins checking:
#-------------------------------------------------------------------------------
ifndef PLATFORM
  $(error ERROR in file  Makerules: $(PLATFORM) Unknown type of platform) 
endif
ifeq ($(PLATFORM), PLATFORM_ZIGBIT)                         ######### ZigBit platform #####
  ifeq (, $(findstring $(HAL_FREQUENCY), HAL_8MHz HAL_4MHz))
    $(error ERROR in file  Makerules: $(HAL_FREQUENCY) Unknown type of HAL frequency for $(PLATFORM) platform) 
  endif

  ifeq (, $(findstring $(HAL), ATMEGA1281 ATMEGA2561))
    $(error ERROR in file  Makerules: $(HAL) Unknown type of HAL for $(PLATFORM) platform) 
  endif
  # For platform with 32.768 kHz only.  
  SYSTEM_TIME_ON = SLEEP_TIMER
endif # ZIGBIT

ifeq ($(PLATFORM), PLATFORM_RAVEN)                            ######### Raven platform #####
  # Checking parameters which were set by user.
  ifeq (, $(findstring $(HAL_FREQUENCY), HAL_8MHz HAL_4MHz))
    $(error ERROR in file  Makerules: $(HAL_FREQUENCY) Unknown type of HAL frequency for $(PLATFORM) platform) 
  endif
  # Setting platform parameters which can not be changed by user.
  HAL = ATMEGA1284
  # For platform with 32.768 kHz only.  
  SYSTEM_TIME_ON = SLEEP_TIMER
endif # RAVEN

ifeq ($(PLATFORM), PLATFORM_ATML_USB_DONGLE)         ######### ATML_USB_DONGLE platform #####
  # Setting platform parameters which can not be changed by user.
  HAL = AT90USB1287
  HAL_FREQUENCY = HAL_8MHz
endif # ATML_USB_DONGLE

ifeq ($(PLATFORM), PLATFORM_STK600_RF2XX)   ####### ATML_STK600 + RF2XX radio platform #### 
  # Checking parameters.
  ifeq (, $(findstring $(HAL_CLOCK_SOURCE), CRYSTAL_16MHz RC_INTERNAL_32MHz RC_INTERNAL_2MHz))
    $(error ERROR in file  Makerules: $(HAL_CLOCK_SOURCE) Unknown type of clock source for $(PLATFORM) platform) 
  endif

  ifeq (, $(findstring $(HAL_FREQUENCY), HAL_4MHz HAL_8MHz HAL_12MHz HAL_16MHz HAL_32MHz))
    $(error ERROR in file  Makerules: $(HAL_FREQUENCY) Unknown type of HAL frequency for $(PLATFORM) platform) 
  endif

  ifeq (, $(findstring $(HAL), ATXMEGA128A1 ATXMEGA256A3))
    $(error ERROR in file  Makerules: $(HAL) Unknown type of HAL for $(PLATFORM) platform) 
  endif
endif # PLATFORM_STK500_RF2XX

ifeq ($(PLATFORM), PLATFORM_STK500_RF2XX)   ####### ATML_STK500 + RF2XX radio platform #### 
  # Checking parameters.
  ifeq (, $(findstring $(HAL_FREQUENCY), HAL_8MHz HAL_4MHz))
    $(error ERROR in file  Makerules: $(HAL_FREQUENCY) Unknown type of HAL frequency for $(PLATFORM) platform) 
  endif

  ifeq (, $(findstring $(HAL), ATMEGA1281 ATMEGA2561))
    $(error ERROR in file  Makerules: $(HAL) Unknown type of HAL for $(PLATFORM) platform) 
  endif
  
  # For platform with 32.768 kHz only.  
  SYSTEM_TIME_ON = SLEEP_TIMER
endif # PLATFORM_STK500_RF2XX


ifeq ($(PLATFORM), PLATFORM_ZIGBIT_TURBO)                   #### ZIGBIT_TURBO platform ####
  # Setting platform parameters which can not be changed by user.
  HAL = AT91SAM7X256
  ifeq ($(HAL_CLOCK_SOURCE), CRYSTAL)
    HAL_FREQUENCY = HAL_18d432MHz
  endif # CRYSTAL

  # Checking parameters which were set by user.
  ifeq (, $(findstring $(HAL_CLOCK_SOURCE), CRYSTAL RF))
    $(error ERROR in file  Makerules: $(HAL_CLOCK_SOURCE) Unknown clock HAL source for $(PLATFORM) platform) 
  endif
endif # PLATFORM_ZIGBIT_TURBO


ifeq ($(PLATFORM), PLATFORM_ZIGBIT_LAN)                     ###### ZIGBIT_LAN platform ####
  # Setting platform parameters which can not be changed by user.
  HAL = AT91SAM7X256
  ifeq ($(HAL_CLOCK_SOURCE), CRYSTAL)
    HAL_FREQUENCY = HAL_18d432MHz
  endif # CRYSTAL

  # Checking parameters which were set by user.
  ifeq (, $(findstring $(HAL_CLOCK_SOURCE), CRYSTAL RF))
    $(error ERROR in file  Makerules: $(HAL_CLOCK_SOURCE) Unknown clock HAL source for $(PLATFORM) platform) 
  endif
endif # PLATFORM_ZIGBIT_LAN


ifeq ($(PLATFORM), PLATFORM_SAM7X_EK_RF2XX)     ##### PLATFORM_SAM7X_EK_RF2XX platform ####
  HAL = AT91SAM7X256
  HAL_CLOCK_SOURCE = CRYSTAL
  HAL_FREQUENCY = HAL_18d432MHz
endif # PLATFORM_SAM7X_EK_RF2XX


ifeq ($(PLATFORM), PLATFORM_HON_IQL)             ########### PLATFORM_HON_IQL platform ####
  HAL = AT91SAM7X256
  HAL_CLOCK_SOURCE = CRYSTAL
  HAL_FREQUENCY = HAL_8MHz
endif # PLATFORM_HON_IQL

ifeq ($(PLATFORM), PLATFORM_HON_ALERTON)            #### PLATFORM_HON_ALERTON platform ####
  HAL = AT91SAM7X256
  HAL_CLOCK_SOURCE = CRYSTAL
  HAL_FREQUENCY = HAL_8MHz
endif # PLATFORM_HON_ALERTON

ifeq ($(PLATFORM), PLATFORM_ATMEGA128RFA1)                         ######### ATMega128RFA1 platform #####
  HAL = ATMEGA128RFA1

  ifeq (, $(findstring $(HAL_FREQUENCY), HAL_8MHz HAL_4MHz))
    $(error ERROR in file  Makerules: $(HAL_FREQUENCY) Unknown type of HAL frequency for $(PLATFORM) platform) 
  endif

  # For platform with 32.768 kHz only.
  SYSTEM_TIME_ON = SLEEP_TIMER
endif # PLATFORM_ATMEGA128RFA1


#-------------------------------------------------------------------------------
# Compiler paths:
#-------------------------------------------------------------------------------
ifeq ($(HAL), AT91SAM7X256)
  IAR_PATH = "C:/Program Files/IAR Systems/Embedded Workbench 5.4/ARM"
else # ATMEGA1281 or ATMEGA2561
  IAR_PATH = "C:/Program Files/IAR Systems/Embedded Workbench 5.3/avr"
endif

#-------------------------------------------------------------------------------
# CPU selection:
#-------------------------------------------------------------------------------

ifeq ($(HAL), ATMEGA1281)
  ifeq ($(COMPILER_TYPE), GCC)
    CPU = atmega1281
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    CPU = m1281
  endif
endif
ifeq ($(HAL), ATMEGA2561)
  ifeq ($(COMPILER_TYPE), GCC)
    CPU = atmega2561
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    CPU = m2561
  endif
endif
ifeq ($(HAL), ATMEGA1284)
  ifeq ($(COMPILER_TYPE), GCC)
    CPU = atmega1284p
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    CPU = m1284p
  endif
endif
ifeq ($(HAL), AT90USB1287)
  ifeq ($(COMPILER_TYPE), GCC)
    CPU = at90usb1287
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    CPU = m1287
  endif
endif
ifeq ($(HAL), ATXMEGA128A1)
  ifeq ($(COMPILER_TYPE), GCC)
    CPU = atxmega128a1
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    CPU = xm128a1
  endif
endif
ifeq ($(HAL), ATXMEGA256A3)
  ifeq ($(COMPILER_TYPE), GCC)
    CPU = atxmega256a3
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    CPU = xm256a1
  endif
endif
ifeq ($(HAL), AT91SAM7X256)
  CPU = arm7tdmi
endif
ifeq ($(HAL), ATMEGA128RFA1)
  ifeq ($(COMPILER_TYPE), GCC)
    CPU = atmega128rfa1
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    CPU = ???
  endif
endif
ifndef HAL
  $(error ERROR in file  Makerules: $(CPU) Unknown type of CPU) 
endif


#-------------------------------------------------------------------------------
# Cross-platform compiler type declaration:
#-------------------------------------------------------------------------------
ifndef COMPILER_TYPE
  $(error ERROR in file  Makerules: $(COMPILER_TYPE) - unknow type of compiler) 
endif
ifeq ($(HAL), AT91SAM7X256)
  ifeq ($(COMPILER_TYPE), IAR)
    CROSS_COMPILER = arm
  endif
  ifeq ($(COMPILER_TYPE), GCC)
    CROSS_COMPILER = arm-elf
  endif
endif
ifneq (, $(findstring $(HAL), ATMEGA1281 ATMEGA2561 ATMEGA1284 AT90USB1287 ATXMEGA128A1 ATXMEGA256A3 ATMEGA128RFA1))
  CROSS_COMPILER = avr
endif
ifndef CROSS_COMPILER
  #$(error ERROR in file  Makerules: Cross-platform compiler type is not detected) 
endif

#-------------------------------------------------------------------------------
# Output options definitions:
#-------------------------------------------------------------------------------
ifeq ($(QUIET), TRUE)
  Q = @
  SILENT = -s
 
  AS_MSG      = @echo "$(AS)" $?
  LD_MSG      = @echo "$(LD)" $@
  CC_MSG      = @echo "$(CC)" $?
  CPP_MSG     = @echo "$(CPP)" $?
  AR_MSG      = @echo "$(AR)" $@
  NM_MSG      = @echo "$(NM)" $@
  STRIP_MSG   = @echo "$(STRIP)" $@
  OBJCOPY_MSG = @echo "$(OBJCOPY)" $@
  OBJDUMP_MSG = @echo "$(OBJDUMP)" $@
  SHOW_SIZE   = @echo
else
  SHOW_SIZE   = $(SIZE)
endif


#-------------------------------------------------------------------------------
# Components paths. In each component COMPONENTS_PATH should be defined:
#-------------------------------------------------------------------------------
ifeq ($(PLATFORM), PLATFORM_ZIGBIT_TURBO)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/arm7tdmi/at91sam7x256/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/arm7tdmi/at91sam7x256/zigBitArm
endif
ifeq ($(PLATFORM), PLATFORM_ZIGBIT_LAN)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/arm7tdmi/at91sam7x256/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/arm7tdmi/at91sam7x256/zigBitArm
endif
ifeq ($(PLATFORM), PLATFORM_SAM7X_EK_RF2XX)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/arm7tdmi/at91sam7x256/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/arm7tdmi/at91sam7x256/atmlEvalKit
endif
ifeq ($(PLATFORM), PLATFORM_HON_IQL)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/arm7tdmi/at91sam7x256/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/arm7tdmi/at91sam7x256/honIql
endif
ifeq ($(PLATFORM), PLATFORM_HON_ALERTON)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/arm7tdmi/at91sam7x256/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/arm7tdmi/at91sam7x256/honAlerton
endif
ifeq ($(PLATFORM), PLATFORM_ZIGBIT)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/avr/atmega1281/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/avr/atmega1281/zigBit
endif
ifeq ($(PLATFORM), PLATFORM_RAVEN)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/avr/atmega1284/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/avr/atmega1284/raven
endif
ifeq ($(PLATFORM), PLATFORM_STK600_RF2XX)
  ifeq ($(HAL), ATXMEGA128A1)
    HAL_HWD_COMMON_PATH = $(HAL_PATH)/xmega/atxmega128a1/common
    HAL_MAC_API_PATH    = $(HAL_PATH)/xmega/atxmega128a1/stk600
  endif # ATXMEGA128A1
  ifeq ($(HAL), ATXMEGA256A3)
    HAL_HWD_COMMON_PATH = $(HAL_PATH)/xmega/atxmega256a3/common
    HAL_MAC_API_PATH    = $(HAL_PATH)/xmega/atxmega256a3/stk600
  endif # ATXMEGA128A3
endif # PLATFORM_STK600_RF2XX
ifeq ($(PLATFORM), PLATFORM_STK500_RF2XX)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/avr/atmega1281/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/avr/atmega1281/zigBit
endif
ifeq ($(PLATFORM), PLATFORM_ATML_USB_DONGLE)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/avr/at90usb1287/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/avr/at90usb1287/usbDongle
endif
ifeq ($(PLATFORM), PLATFORM_ATMEGA128RFA1)
  HAL_HWD_COMMON_PATH = $(HAL_PATH)/avr/atmega128rfa1/common
  HAL_MAC_API_PATH    = $(HAL_PATH)/avr/atmega128rfa1/common
endif
ifndef HAL_HWD_COMMON_PATH
  $(error ERROR in file  Makerules: unknown or unsupported platform) 
endif
ifndef HAL_MAC_API_PATH
  $(error ERROR in file  Makerules: unknown or unsupported platform) 
endif

#-------------------------------------------------------------------------------------
# Stack library name definition.
#-------------------------------------------------------------------------------------
ifeq ($(COMPILER_TYPE), IAR)
  LIB_NAME_COMPILER = _Iar
endif
ifeq ($(COMPILER_TYPE), GCC)
  LIB_NAME_COMPILER = _Gcc
endif

ifneq ($(HAL), AT91SAM7X256)
  ifeq ($(HAL_FREQUENCY), HAL_4MHz)
    LIB_NAME_HAL_FREQ = _4Mhz
  endif
  ifeq ($(HAL_FREQUENCY), HAL_8MHz)
    LIB_NAME_HAL_FREQ = _8Mhz
  endif
  ifeq ($(HAL_FREQUENCY), HAL_12MHz)
    LIB_NAME_HAL_FREQ = _12Mhz
  endif
  ifeq ($(HAL_FREQUENCY), HAL_16MHz)
    LIB_NAME_HAL_FREQ = _16Mhz
  endif
  ifeq ($(HAL_FREQUENCY), HAL_32MHz)
    LIB_NAME_HAL_FREQ = _32Mhz
  endif
endif

ifeq ($(PLATFORM), PLATFORM_ZIGBIT)
  LIB_NAME_PLATFORM = _ZigBit
endif
ifeq ($(PLATFORM), PLATFORM_RAVEN)
  LIB_NAME_PLATFORM = _Raven
endif
ifeq ($(PLATFORM), PLATFORM_ATML_USB_DONGLE)
  LIB_NAME_PLATFORM = _AtmlUsbDongle
endif
ifeq ($(PLATFORM), PLATFORM_STK600_RF2XX)
  LIB_NAME_PLATFORM = _AtmlStk600Rf2xx
endif
ifeq ($(PLATFORM), PLATFORM_STK500_RF2XX)
  LIB_NAME_PLATFORM = _AtmlStk500Rf2xx
endif
ifeq ($(PLATFORM), PLATFORM_ZIGBIT_TURBO)
  LIB_NAME_PLATFORM = _ZigBitTurbo
endif
ifeq ($(PLATFORM), PLATFORM_ZIGBIT_LAN)
  LIB_NAME_PLATFORM = _ZigBitLan
endif
ifeq ($(PLATFORM), PLATFORM_SAM7X_EK_RF2XX)
  LIB_NAME_PLATFORM = _Sam7xEkRf2xx
endif
ifeq ($(PLATFORM), PLATFORM_HON_IQL)
  LIB_NAME_PLATFORM = _HonIql
endif
ifeq ($(PLATFORM), PLATFORM_HON_ALERTON)
  LIB_NAME_PLATFORM = _HonAlerton
endif
ifeq ($(PLATFORM), PLATFORM_ATMEGA128RFA1)
  LIB_NAME_PLATFORM = _Atmega128rfa1
endif

ifeq ($(HAL), ATMEGA1281)
  LIB_NAME_MICRO = _Atmega1281
endif
ifeq ($(HAL), ATMEGA2561)
  LIB_NAME_MICRO = _Atmega2561
endif
ifeq ($(HAL), ATMEGA1284)
  LIB_NAME_MICRO = _Atmega1284
endif
ifeq ($(HAL), AT90USB1287)
  LIB_NAME_MICRO = _At90usb1287
endif
ifeq ($(HAL), ATXMEGA128A1)
  LIB_NAME_MICRO = _Atxmega128a1
endif
ifeq ($(HAL), ATXMEGA256A3)
  LIB_NAME_MICRO = _Atxmega256a3
endif
ifeq ($(HAL), ATMEGA128RFA1)
  LIB_NAME_MICRO = _Atmega128rfa1
endif
ifeq ($(HAL), AT91SAM7X256)
  LIB_NAME_MICRO = _At91sam7x256
endif

ifeq ($(HAL_USE_AMPLIFIER), TRUE)
  FEATURE_10 = _UseAmplifier
endif
LIB_NAME_FEATURES=$(FEATURE_10)

STACK_LIB = $(LIB_NAME_PLATFORM)$(LIB_NAME_MICRO)$(LIB_NAME_HAL_FREQ)$(LIB_NAME_COMPILER)

ifndef STACK_LIB
  $(error ERROR: Build target is not defined) 
endif

include $(STACK_LIB_PATH)/Makerules$(STACK_LIB)

HAL_LIB = HAL$(STACK_LIB)

#-------------------------------------------------------------------------------
# Compiler flags:
#-------------------------------------------------------------------------------
ifeq ($(PLATFORM), PLATFORM_STK600_RF2XX)   ####### ATML_STK600 + RF2XX radio platform #### 
  ifdef HAL_CLOCK_SOURCE
    CFLAGS += -D$(HAL_CLOCK_SOURCE)
  endif
endif

#-------------------------------------------------------------------------------
# Check compiler version:
#-------------------------------------------------------------------------------
ifeq ($(COMPILER_TYPE), GCC)
  COMPILER_VERSION = $(strip $(shell $(CC) -v 2>&1 | grep 'gcc version'))
endif
ifeq ($(COMPILER_TYPE), IAR)
  COMPILER_VERSION = $(strip $(shell $(CC) | grep 'C/C++ Compiler V'))
endif

ifeq ($(COMPILER_AND_MICRO_TYPE), GCC_AVR)
  EXP_VERSION = gcc version 4.3.2 (WinAVR 20090313)
endif
ifeq ($(COMPILER_AND_MICRO_TYPE), IAR_AVR)
  EXP_VERSION = IAR C/C++ Compiler V5.20.1.50092/W32 for Atmel AVR
endif
ifeq ($(COMPILER_AND_MICRO_TYPE), GCC_ARM)
  EXP_VERSION = gcc version 4.2.2
endif
ifeq ($(COMPILER_AND_MICRO_TYPE), IAR_ARM)
  EXP_VERSION = IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM
endif

ifneq ($(EXP_VERSION), $(COMPILER_VERSION))
  $(error ERROR in file Makerules: You are using incorrect version of compiler: \
    installed $(COMPILER_VERSION), expected $(EXP_VERSION))
endif

ifeq ($(COMPILER_TYPE), IAR)
  COMPILER_TYPE_LOWER_CASE = Iar
else
  COMPILER_TYPE_LOWER_CASE = Gcc
endif # COMPILER_TYPE

ifeq ($(HAL), ATMEGA1281)
  WDT_INIT_OBJ=WdtInitatmega1281$(COMPILER_TYPE_LOWER_CASE).o
endif
ifeq ($(HAL), ATMEGA2561)
  WDT_INIT_OBJ=WdtInitatmega2561$(COMPILER_TYPE_LOWER_CASE).o
endif
ifeq ($(HAL), ATMEGA1284)
  WDT_INIT_OBJ=WdtInitatmega1284$(COMPILER_TYPE_LOWER_CASE).o
endif
ifeq ($(HAL), AT90USB1287)
  WDT_INIT_OBJ=WdtInitat90usb1287$(COMPILER_TYPE_LOWER_CASE).o
endif
ifeq ($(HAL), ATMEGA128RFA1)
  WDT_INIT_OBJ=WdtInitatmega128rfa1$(COMPILER_TYPE_LOWER_CASE).o
endif
ifeq ($(HAL), AT91SAM7X256)
  ifeq ($(OS), FREE_RTOS)
    FREE_RTOS_LIB=FreeRTOSat91sam7x256
  endif
  ifeq ($(COMPILER_TYPE), GCC)
    ifeq ($(OS), FREE_RTOS)
      BOOT_OBJ = $(LIBDIR)/FreertosBoot$(COMPILER_TYPE_LOWER_CASE).o
    endif
    ifeq ($(OS), NONE_OS)
      BOOT_OBJ = $(LIBDIR)/FirmwareBoot$(COMPILER_TYPE_LOWER_CASE).o
    endif
  endif
  ifeq ($(COMPILER_TYPE), IAR)
    ifeq ($(OS), FREE_RTOS)
    endif
    ifeq ($(OS), NONE_OS)
      BOOT_OBJ = $(LIBDIR)/FirmwareBoot$(COMPILER_TYPE_LOWER_CASE).o
    endif
  endif
endif
